4. /* front.c - a lexical analyzer system for simple arithmetic expressions */ #include <stdio.h> #include <ctype.h>
5. /* Global declarations / / Variables */ int charClass; // Character class char lexeme[100]; // Array to hold the current lexeme char nextChar; // Next character to be processed int lexLen; // Length of the current lexeme int token; // Current token int nextToken; // Next token to be returned FILE *in_fp, *fopen(); // File pointer for input file
6. /* Function declarations */ void addChar(); // Function to add nextChar to lexeme void getChar(); // Function to get the next character of input void getNonBlank(); // Function
     
 to skip whitespace characters int lex(); // Lexical analyzer
function
7. /* Character classes */ #define LETTER 0 // Character class
for letters #define DIGIT 1 // Character class for digits #define UNKNOWN 99 // Character class for unknown characters
8. /* Token codes */ #define INT_LIT 10 // Token code for integer literals #define IDENT 11 // Token code for identifiers #define ASSIGN_OP 20 // Token code for assignment operator #define ADD_OP 21 // Token code for addition operator #define SUB_OP 22 // Token code for subtraction operator #define MULT_OP 23 // Token code for multiplication operator #define DIV_OP 24 // Token code for division operator #define LEFT_PAREN 25 // Token code for left parenthesis #define RIGHT_PAREN 26 // Token code for right parenthesis
9. /************************************************ *****/ / main driver */ main() {
10. /* Open the input data file and process its contents */ if ((in_fp = fopen("front.in", "r")) == NULL) {
 
 11. printf("ERROR - cannot open front.in \n"); }else{
12. getChar(); // Get the first character from the input file do{
13. lex(); // Call the lexical analyzer
14. } while (nextToken != EOF); // Continue until EOF is
reached 15. }
16. }
17. /**********************************************
******/ / lookup - a function to lookup operators and parentheses and return the token / int lookup(char ch) { switch (ch) { case '(': addChar(); nextToken = LEFT_PAREN; break; case ')': addChar(); nextToken = RIGHT_PAREN; break; case '+': addChar(); nextToken = ADD_OP; break; case '-': addChar(); nextToken = SUB_OP; break; case '': addChar(); nextToken = MULT_OP; break; case '/': addChar(); nextToken = DIV_OP; break; default: addChar(); nextToken = EOF; break; } return nextToken; // Return the token }
18.
 
 19. /********************************************** ******/ / addChar - a function to add nextChar to lexeme */ void addChar() { if (lexLen <= 98) { lexeme[lexLen++] = nextChar; // Add nextChar to lexeme lexeme[lexLen] = 0; // Null- terminate the lexeme } else { printf("Error - lexeme is too long \n"); // Error message if lexeme is too long } }
20. /********************************************** ******/ / getChar - a function to get the next character of input and determine its character class */ void getChar() { if ((nextChar = getc(in_fp)) != EOF) { if (isalpha(nextChar)) { charClass = LETTER; // Set character class to LETTER } else if (isdigit(nextChar)) { charClass = DIGIT; // Set character class to DIGIT } else { charClass = UNKNOWN; // Set character class to UNKNOWN } } else { charClass = EOF; // Set character class to EOF}}
21. /********************************************** ******/ / getNonBlank - a function to call getChar until it returns a non-whitespace character */ void getNonBlank() { while (isspace(nextChar)) { // While the character is whitespace getChar(); // Get the next character } }
 
 22. /********************************************** ******/ / lex - a simple lexical analyzer for arithmetic expressions / int lex() { lexLen = 0; // Reset lexeme length getNonBlank(); // Skip any leading whitespace switch (charClass) { / Parse identifiers */ case LETTER: addChar(); getChar(); while (charClass == LETTER || charClass == DIGIT) { // While character is LETTER or DIGIT addChar(); getChar(); } nextToken = IDENT; break;
23. /* Parse integer literals */ case DIGIT:
24. addChar();
25. getChar();
26. while (charClass == DIGIT) { // While character is DIGIT
27. addChar();
28. getChar(); }
29. nextToken = INT_LIT; break;
30. /* Parentheses and operators */ case UNKNOWN:
31. lookup(nextChar); // Lookup the character getChar(); //
Get the next character 32. break;
33. /* EOF */ case EOF:
 
 34. nextToken = EOF; // Set token to EOF lexeme[0] = 'E'; // Set lexeme to "EOF" lexeme[1] = 'O';
35. lexeme[2] = 'F';
36. lexeme[3] = 0; // Null-terminate the lexeme
37. break; }
38. /* End of switch */
39. printf("Next token is: %d, Next lexeme is %s\n",
nextToken, lexeme); // Output the next token and lexeme
return nextToken; // Return the next token 40.
41. }
/* End of function lex */